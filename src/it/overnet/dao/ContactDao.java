package it.overnet.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Logger;

import it.overnet.models.Contact;
import it.overnet.utilities.DBUtilityConnection;

public class ContactDao {

	public static final Logger logger = Logger.getLogger(Logger.class.getName());

	public static boolean createTable() throws Exception {

		Connection dbConnection = null;
		Statement statement = null;
		

		boolean check = false;
		/*String createTableSQL = "CREATE TABLE CONTACT "
				+ "(ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL , " + " NOME VARCHAR(255), "
				+ " COGNOME VARCHAR(255), " + " TEL VARCHAR(255), " +

				" MAIL VARCHAR(255), " + " CONSTRAINT CONTACT_PK PRIMARY KEY ( ID )) CONSTRAINT user_fk" + 
			    "FOREIGN KEY (user_id)" + "REFERENCES USER(user_id)";*/
		
		String createTableSQL = "CREATE TABLE CONTACT "+
				"(ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL ," +
				"NOME VARCHAR(255), "+ "COGNOME VARCHAR(255), " + "TEL VARCHAR(255), " + "MAIL VARCHAR(255), "+
				"ID_USER NUMBER," + "CONSTRAINT CONTACT_PK PRIMARY KEY ( ID ), " + 
				"CONSTRAINT USER_FK FOREIGN KEY (ID_USER) REFERENCES USERTABLE(ID))";

		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			statement = dbConnection.createStatement();

			// System.out.println(createTableSQL);

			statement.execute(createTableSQL);


			check = true;
			

			logger.info("Tabella CONTACT creata con successo!");

		} catch (SQLException e) {

			logger.warning(e.getMessage());

		} finally {

			if (statement != null) {
				statement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}

		}
		return check;
	}

	public static boolean insertRecordIntoTable(Contact contatto, int userId) throws Exception {

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		PreparedStatement checkRow = null;
		ResultSet resultSet = null;
		String insertTableSQL = "INSERT INTO CONTACT" + "(ID, nome, cognome, tel, mail, id_user) VALUES" + "(?,?,?,?,?,?)";
		String selectRow = "SELECT ID FROM CONTACT WHERE ID= ?";
		boolean check = false;
		boolean cicle = true;
		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			int count = 1;
			checkRow = dbConnection.prepareStatement(selectRow);
			
			do{	
				
				checkRow.setInt(1, count);
				resultSet = checkRow.executeQuery();
				if(resultSet.next()){
					count++;
					
				} else {
					
					cicle = false;
				}
			}while(cicle);
			
			
			preparedStatement = dbConnection.prepareStatement(insertTableSQL);
			preparedStatement.setInt(1, count);
			preparedStatement.setString(2, contatto.getNome());
			preparedStatement.setString(3, contatto.getCognome());
			preparedStatement.setString(4, contatto.getTel());
			preparedStatement.setString(5, contatto.getMail());
			preparedStatement.setInt(6, userId);
			
			// execute insert SQL statement
			int i = preparedStatement.executeUpdate();
			
			check = true;

			logger.info("Record inserito nella tabella CONTACT!");

		} catch (SQLException e) {

			logger.warning("Errore nella query insert");

		} finally {

			if (preparedStatement != null) {
				preparedStatement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}

		}
		return check;
	}

	public static ArrayList<Contact> selectRecordIntoTable() throws Exception {

		Connection dbConnection = null;
		Statement statement = null;
		String selectTableSQL = "SELECT * FROM CONTACT";
		System.out.println(selectTableSQL);

		ResultSet resulSet = null;

		ArrayList<Contact> list = new ArrayList<>();

		try {

			dbConnection = DBUtilityConnection.getDBConnection();
			statement = dbConnection.prepareStatement(selectTableSQL);

			resulSet = statement.executeQuery(selectTableSQL);

			while (resulSet.next()) {
				int id = Integer.parseInt(resulSet.getString("ID"));
				String nome = resulSet.getString("NOME");
				String cognome = resulSet.getString("COGNOME");
				String tel = resulSet.getString("TEL");
				String mail = resulSet.getString("MAIL");
				Contact contatto = new Contact(nome, cognome, tel, mail);
				contatto.setId(id);
				list.add(contatto);
				System.out.println("Contatto: " + contatto);
			}

		} catch (SQLException e) {

			logger.warning("Errore nella select");
			e.printStackTrace();

		} finally {

			if (statement != null) {
				statement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}
		}

		return list;

	}
	
	public static ArrayList<Contact> selectRecordIntoTable(int userId) throws Exception {

		Connection dbConnection = null;
		PreparedStatement statement = null;
		String selectTableSQL = "SELECT * FROM CONTACT WHERE ID_USER= ?";
		System.out.println(selectTableSQL);

		ResultSet resulSet = null;

		ArrayList<Contact> list = new ArrayList<>();

		try {

			dbConnection = DBUtilityConnection.getDBConnection();
			statement = dbConnection.prepareStatement(selectTableSQL);
			statement.setInt(1, userId);
			resulSet = statement.executeQuery();

			while (resulSet.next()) {
				int id = Integer.parseInt(resulSet.getString("ID"));
				String nome = resulSet.getString("NOME");
				String cognome = resulSet.getString("COGNOME");
				String tel = resulSet.getString("TEL");
				String mail = resulSet.getString("MAIL");
				Contact contatto = new Contact(nome, cognome, tel, mail);
				contatto.setId(id);
				list.add(contatto);
				System.out.println("Contatto: " + contatto);
			}

		} catch (SQLException e) {

			logger.warning("Errore nella select");
			e.printStackTrace();

		} finally {

			if (statement != null) {
				statement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}
		}

		return list;

	}

	public static boolean deleteRecordIntoTable(Contact contatto) throws Exception {

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String insertTableSQL = "DELETE FROM CONTACT " + " WHERE ID = ?";
		boolean check = false;

		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL);

			preparedStatement.setInt(1, contatto.getId());
			// execute insert SQL stetement
			preparedStatement.executeUpdate();

			check = true;

			System.out.println("Record eliminato nella tabella CONTACT!");

		} catch (SQLException e) {

			System.err.println(e.getMessage());

		} finally {

			if (preparedStatement != null) {
				preparedStatement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}

		}
		return check;
	}

	public static boolean updateRecordIntoTable(Contact contatto) throws Exception {

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		boolean check = false;

		String insertTableSQL = "UPDATE CONTACT SET NOME = ?, COGNOME = ?, TEL= ?, MAIL= ? WHERE ID = ?";
		System.out.println(insertTableSQL);
		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL);

			preparedStatement.setString(1, contatto.getNome());
			preparedStatement.setString(2, contatto.getCognome());
			preparedStatement.setString(3, contatto.getTel());
			preparedStatement.setString(4, contatto.getMail());
			preparedStatement.setInt(5, contatto.getId());

			//preparedStatement.setInt(2, 1);

			// execute insert SQL stetement
			preparedStatement.executeUpdate();

			check = true;

			logger.info("Record aggiornato nella tabella CONTACT!");

		} catch (SQLException e) {

			logger.warning("Record non aggiornato nella tabella CONTACT");

		} finally {

			if (preparedStatement != null) {
				preparedStatement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}

		}
		return check;
	}

	public static Contact selectRecordById(int id) throws Exception {
		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String selectTableSQL = "SELECT * FROM CONTACT WHERE ID= ?";
		System.out.println(selectTableSQL);

		ResultSet resulSet = null;
		Contact contatto = null;

		try {

			dbConnection = DBUtilityConnection.getDBConnection();
			preparedStatement = dbConnection.prepareStatement(selectTableSQL);
			preparedStatement.setInt(1, id);
			resulSet = preparedStatement.executeQuery();

			while (resulSet.next()) {

				String nome = resulSet.getString("NOME");
				String cognome = resulSet.getString("COGNOME");
				String tel = resulSet.getString("TEL");
				String mail = resulSet.getString("MAIL");
				contatto = new Contact(nome, cognome, tel, mail);
				contatto.setId(id);

			}

		} catch (SQLException e) {

			logger.warning("Errore nella select");

		} finally {

			if (preparedStatement != null) {
				preparedStatement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}
		}

		return contatto;

	}
	
	public static boolean isTableExist(String tableName){
		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;
		String selectTableSQL = "select table_name from user_tables where table_name=?";

		ResultSet resultSet = null;
		
		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			preparedStatement = dbConnection.prepareStatement(selectTableSQL);
			preparedStatement.setString(1, tableName);
			resultSet = preparedStatement.executeQuery();
			if(!resultSet.next()){
				return false;
			} else {
				return true;
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		

		
	}
}
